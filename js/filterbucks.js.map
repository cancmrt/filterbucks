{"version":3,"file":"filterbucks.js","sources":["../ts/base/Configurations/BaseConfiguration.ts","../ts/base/Events/FilterbucksEvents.ts","../ts/base/Checks/ExtraConfigurationChecker.ts","../ts/base/SpecialSelectors/ButtonSelector.ts","../ts/base/Initializers/FilterbucksElementInitializers.ts","../ts/base/Counters/DeepCounter.ts","../ts/base/SpecialSelectors/Flusher.ts","../ts/base/SpecialSelectors/DeepElementSelector.ts","../ts/base/Query/QueryEngine.ts","../ts/base/Initializers/FilterHiderInitializers.ts","../ts/base/Engine.ts","../ts/filterbucks.ts"],"sourcesContent":["import jQuery from \"jquery\";\r\nexport class BaseConfiguration {\r\n\r\n\r\n    BaseClass:string;\r\n    DataDeepProp:string;\r\n    DataFlushProp:string;\r\n    CheckSelector:string;\r\n    ButtonCheckSelector:string;\r\n    Event:string;\r\n    RelatedFilterShowClass:string;\r\n    RelatedFilterHideClass:string;\r\n    FilterShowClass:string\r\n    FilterHideClass:string\r\n    FilterTargetElementClass:string\r\n    FilterStartEvent:string\r\n    FilterEndEvent:string\r\n    Type:string\r\n\r\n    constructor(public Parents:JQuery<HTMLFormElement>, public ExtraConfiguration:any)\r\n    {\r\n        this.BaseClass = \".filterbucks\";\r\n        this.DataDeepProp = \"fbdeep\";\r\n        this.DataFlushProp= \"fbflush\";\r\n        this.CheckSelector = \":checked\";\r\n        this.ButtonCheckSelector = \"clicked\";\r\n        this.Event = \"change\";\r\n        this.RelatedFilterShowClass = \"filterbucksRelatedShow\";\r\n        this.RelatedFilterHideClass = \"filterbucksRelatedHide\";\r\n        this.FilterShowClass = \"filterbucksFilteredShow\";\r\n        this.FilterHideClass = \"filterbucksFilteredHide\";\r\n        this.FilterTargetElementClass = \"filterbucksSelected\";\r\n        this.FilterStartEvent = \"filterbucks-start\";\r\n        this.FilterEndEvent = \"filterbucks-end\";\r\n        this.Type = jQuery(Parents).get(0).tagName == \"INPUT\" ? jQuery(Parents).prop(\"type\").toLowerCase() : jQuery(Parents).get(0).tagName.toLowerCase();\r\n        if (this.Type === \"button\" || this.Type === \"a\") {\r\n            this.Event = \"click\";\r\n            this.CheckSelector = \"[clicked]\";\r\n        }\r\n        if (this.Type === \"select\") {\r\n            this.CheckSelector = \"option:selected\";\r\n        }\r\n        if (this.Type === \"radio\" || this.Type === \"checkbox\") {\r\n            this.CheckSelector = \":checked\";\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n}","import jQuery from \"jquery\";\r\nimport {BaseConfiguration} from \"../Configurations/BaseConfiguration\";\r\n\r\nexport class FilterbucksEvents\r\n{\r\n    constructor(private Configuration:BaseConfiguration, private FocusedItem:JQuery<HTMLFormElement>)\r\n    {\r\n\r\n    }\r\n    public FilterbucksStartEvent():void {\r\n        jQuery(this.Configuration.Parents).trigger(this.Configuration.FilterStartEvent,this.FocusedItem);\r\n    }\r\n    public FilterbucksEndEvent():void {\r\n        jQuery(this.Configuration.Parents).trigger(this.Configuration.FilterEndEvent,this.FocusedItem);\r\n    }\r\n\r\n\r\n}","import jQuery from \"jquery\";\r\nimport {BaseConfiguration} from \"../Configurations/BaseConfiguration\";\r\nexport class ExtraConfigurationChecker\r\n{\r\n    constructor(private Configuration:BaseConfiguration)\r\n    {\r\n\r\n    }\r\n\r\n    public HasButtonCssOpacity():boolean{\r\n        if(\r\n            this.Configuration.ExtraConfiguration && \r\n            this.Configuration.ExtraConfiguration.ButtonCssOpacity && \r\n            this.Configuration.ExtraConfiguration.ButtonCssOpacity === true\r\n            )\r\n        {\r\n            return true;\r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n    }\r\n    public HasHideUnrelateds():boolean{\r\n        if(this.Configuration.ExtraConfiguration \r\n            && this.Configuration.ExtraConfiguration.HideUnrelateds \r\n            && this.Configuration.ExtraConfiguration.HideUnrelateds === true)\r\n        {\r\n            return true;\r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n    \r\n    }\r\n    public HasBtnSingleChoise():boolean{\r\n        if(this.Configuration.ExtraConfiguration \r\n            && this.Configuration.ExtraConfiguration.BtnSingleChoise \r\n            && this.Configuration.ExtraConfiguration.BtnSingleChoise === true)\r\n        {\r\n            return true;\r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n    \r\n    }\r\n    public HasFlushProp(Item:JQuery<HTMLFormElement> | HTMLFormElement)\r\n    {\r\n        if (\r\n            (jQuery(Item).attr(\"data-\" + this.Configuration.DataFlushProp)) && \r\n            (jQuery(Item).attr(\"data-\" + this.Configuration.DataFlushProp) === \"true\")\r\n            )\r\n        {\r\n            return true;\r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n    }\r\n}","import jQuery from \"jquery\";\r\nimport { BaseConfiguration } from \"../Configurations/BaseConfiguration\";\r\nimport { ExtraConfigurationChecker } from \"../Checks/ExtraConfigurationChecker\";\r\n\r\nexport class ButtonSelector {\r\n\r\n    private Checker:ExtraConfigurationChecker\r\n\r\n    constructor(private Configuration:BaseConfiguration, private FocusedItem:JQuery<HTMLFormElement> | HTMLFormElement)\r\n    {\r\n        this.Checker = new ExtraConfigurationChecker(Configuration);\r\n    }\r\n    ButtonSelectorAdd(FocusThis?:JQuery<HTMLFormElement> | HTMLFormElement):void{\r\n        let FocusDecided:JQuery<HTMLFormElement> | HTMLFormElement;\r\n        if(FocusThis !== undefined)\r\n        {\r\n            FocusDecided = FocusThis;\r\n        }\r\n        else{\r\n            FocusDecided = this.FocusedItem;\r\n        }\r\n        jQuery(FocusDecided).attr(this.Configuration.ButtonCheckSelector, \"\");\r\n        jQuery(FocusDecided).addClass(this.Configuration.FilterTargetElementClass);\r\n        if (this.Checker.HasButtonCssOpacity())\r\n        {\r\n            jQuery(FocusDecided).css(\"opacity\", \"0.5\");\r\n        }\r\n    }\r\n    \r\n    ButtonSelectorRemove(FocusThis?:JQuery<HTMLFormElement> | HTMLFormElement):void{\r\n        let FocusDecided:JQuery<HTMLFormElement> | HTMLFormElement;\r\n        if(FocusThis !== undefined)\r\n        {\r\n            FocusDecided = FocusThis;\r\n        }\r\n        else{\r\n            FocusDecided = this.FocusedItem;\r\n        }\r\n        jQuery(FocusDecided).removeAttr(this.Configuration.ButtonCheckSelector);\r\n        jQuery(FocusDecided).removeClass(this.Configuration.FilterTargetElementClass);\r\n\r\n        if (this.Checker.HasButtonCssOpacity())\r\n        {\r\n            jQuery(FocusDecided).css(\"opacity\", \"1\");\r\n        }\r\n    }\r\n}","import jQuery from \"jquery\";\r\nimport { BaseConfiguration } from \"../Configurations/BaseConfiguration\";\r\nimport { ExtraConfigurationChecker } from \"../Checks/ExtraConfigurationChecker\";\r\nimport { ButtonSelector } from \"../SpecialSelectors/ButtonSelector\";\r\n\r\nexport class FilterbucksElementInitializers\r\n{\r\n    private Checker:ExtraConfigurationChecker;\r\n    private SpecialSelector:ButtonSelector;\r\n    constructor(private Configuration:BaseConfiguration, private FocusedItem:JQuery<HTMLFormElement>)\r\n    {\r\n        this.Checker = new ExtraConfigurationChecker(Configuration);\r\n        this.SpecialSelector = new ButtonSelector(Configuration,FocusedItem);\r\n    }\r\n    public InitializeElement():void\r\n    {\r\n        if (this.Configuration.Type == \"button\" || this.Configuration.Type == \"a\") {\r\n\r\n            this.ButtonInitializer();\r\n    \r\n        }\r\n        else{\r\n            this.FormElementInitializer();\r\n        }\r\n    }\r\n    public InitializeQuery(Query:string):void\r\n    {\r\n        jQuery(this.Configuration.BaseClass).css(\"display\", \"none\");\r\n        jQuery(this.Configuration.BaseClass).removeClass(this.Configuration.FilterShowClass);\r\n        jQuery(this.Configuration.BaseClass).removeClass(this.Configuration.FilterHideClass);\r\n        jQuery(this.Configuration.BaseClass).addClass(this.Configuration.FilterHideClass);\r\n        jQuery(Query).css(\"display\", \"\");\r\n        jQuery(Query).removeClass(this.Configuration.FilterHideClass);\r\n        jQuery(Query).addClass(this.Configuration.FilterShowClass);\r\n    }\r\n    private ButtonInitializer():void\r\n    {\r\n        if(this.Checker.HasBtnSingleChoise())\r\n        {\r\n            var SelectedDeepCount = jQuery(this.FocusedItem).data(this.Configuration.DataDeepProp);\r\n            var AlreadySelectedBtn = jQuery(this.Configuration.Parents)\r\n                                            .filter(\"[\" + this.Configuration.ButtonCheckSelector + \"]\")\r\n                                            .filter('[data-'+this.Configuration.DataDeepProp+' = \"'+SelectedDeepCount+'\"]');\r\n            if(AlreadySelectedBtn.length == 1)\r\n            {\r\n                this.SpecialSelector.ButtonSelectorRemove(AlreadySelectedBtn);\r\n                this.SpecialSelector.ButtonSelectorAdd();\r\n            }\r\n            else if(AlreadySelectedBtn.length < 1)\r\n            {\r\n                this.SpecialSelector.ButtonSelectorAdd();\r\n            }\r\n            \r\n        }\r\n        else{\r\n            if (jQuery(this.FocusedItem).is(\"[\" + this.Configuration.ButtonCheckSelector + \"]\")) {\r\n\r\n                this.SpecialSelector.ButtonSelectorRemove();\r\n            }\r\n            else {\r\n                \r\n                this.SpecialSelector.ButtonSelectorAdd();\r\n            }\r\n        }\r\n    }\r\n    private FormElementInitializer():void\r\n    {\r\n        jQuery(this.Configuration.Parents).removeClass(this.Configuration.FilterTargetElementClass);\r\n        jQuery(this.FocusedItem).addClass(this.Configuration.FilterTargetElementClass);\r\n    }\r\n}","import jQuery from \"jquery\";\r\nimport { BaseConfiguration } from \"../Configurations/BaseConfiguration\";\r\n\r\nexport class DeepCounter{\r\n\r\n    constructor(private Configuration:BaseConfiguration)\r\n    {\r\n\r\n    }\r\n\r\n    public SelectedElementsDeeps():Array<number>{ //Equivalent off giveUniqDeepCounts\r\n\r\n        let FindedDeeps: Array<number> = [];\r\n        let OurConfiguration = this.Configuration;\r\n\r\n        jQuery(OurConfiguration.Parents).each(function () {\r\n            if (OurConfiguration.Type == \"select\") {\r\n                let DetectCheckSelector = $(this).find(OurConfiguration.CheckSelector)\r\n                if (DetectCheckSelector.length > 0) {\r\n                    FindedDeeps.push(parseInt(jQuery(this).data(OurConfiguration.DataDeepProp), 10));\r\n                }\r\n            }\r\n            else if (OurConfiguration.Type == \"radio\" || OurConfiguration.Type == \"checkbox\" || OurConfiguration.Type == \"button\" || OurConfiguration.Type == \"a\") {\r\n                let DetectCheckSelector = $(this).filter(OurConfiguration.CheckSelector)\r\n                if (DetectCheckSelector.length > 0) {\r\n                    FindedDeeps.push(parseInt(jQuery(this).data(OurConfiguration.DataDeepProp), 10));\r\n                }\r\n            }\r\n\r\n\r\n        });\r\n\r\n        let UniqueDeeps = FindedDeeps.filter(function (elem, index, self) {\r\n            return index === self.indexOf(elem);\r\n        });\r\n\r\n        UniqueDeeps = UniqueDeeps.sort(function (a, b) { return a - b });\r\n\r\n        return UniqueDeeps;\r\n    }\r\n    public AllElementsDeep():Array<number>{ //Equivalent off allUniqDeepCounts\r\n\r\n        let FindedDeeps:Array<number> = [];\r\n        let OurConfiguration = this.Configuration;\r\n        jQuery(OurConfiguration.Parents).each(function () {\r\n            if (OurConfiguration.Type == \"select\") {\r\n                FindedDeeps.push(parseInt(jQuery(this).data(OurConfiguration.DataDeepProp), 10));\r\n            }\r\n            else if (OurConfiguration.Type == \"radio\" || OurConfiguration.Type == \"checkbox\" || OurConfiguration.Type == \"button\" || OurConfiguration.Type == \"a\") {\r\n                FindedDeeps.push(parseInt(jQuery(this).data(OurConfiguration.DataDeepProp), 10));\r\n            }\r\n\r\n\r\n        });\r\n\r\n        var uniqueDeeps = FindedDeeps.filter(function (elem, index, self) {\r\n            return index === self.indexOf(elem);\r\n        });\r\n\r\n        uniqueDeeps = uniqueDeeps.sort(function (a, b) { return a - b });\r\n\r\n        return uniqueDeeps;\r\n    }\r\n\r\n}","import jQuery from \"jquery\";\r\nimport { BaseConfiguration } from \"../Configurations/BaseConfiguration\";\r\nimport { ExtraConfigurationChecker } from \"../Checks/ExtraConfigurationChecker\";\r\nimport { ButtonSelector } from \"../SpecialSelectors/ButtonSelector\";\r\n\r\nexport class Flusher {\r\n\r\n    \r\n    private Checker:ExtraConfigurationChecker\r\n\r\n    constructor(private Configuration:BaseConfiguration, \r\n        private SelectedDeeps:Array<number>, \r\n        private FocusedItem:JQuery<HTMLFormElement>)\r\n    {\r\n        this.Checker = new ExtraConfigurationChecker(Configuration);\r\n        \r\n    }\r\n    public Flush():void{\r\n        let DeepCount = parseInt(jQuery(this.FocusedItem).data(this.Configuration.DataDeepProp), 10);\r\n        let RealDeepCount = parseInt(jQuery(this.FocusedItem).data(this.Configuration.DataDeepProp), 10);\r\n\r\n        if (this.Checker.HasFlushProp(this.FocusedItem))\r\n        {\r\n            DeepCount--;\r\n        }\r\n        let OurConfiguration = this.Configuration;\r\n        let OurChecker = this.Checker;\r\n        this.SelectedDeeps.forEach(function(ThisDeep){\r\n            \r\n            if(DeepCount < ThisDeep){\r\n\r\n                var FlushThis = jQuery(OurConfiguration.Parents).filter(\"[data-\" + OurConfiguration.DataDeepProp + \"='\" + ThisDeep + \"']\");\r\n\r\n                if (OurConfiguration.Type == \"select\") {\r\n                    jQuery(FlushThis).find(\"option\").each(function(){\r\n                        if(OurChecker.HasFlushProp(this))\r\n                        {\r\n                            jQuery(FlushThis).val(jQuery(this).val() as string);\r\n                        }\r\n                    });\r\n                }\r\n                else if (OurConfiguration.Type == \"button\" || OurConfiguration.Type == \"a\") {\r\n                    jQuery(FlushThis).each(function(){\r\n                        let SpeacialBtnSelector = new ButtonSelector(OurConfiguration,this);\r\n                        if(OurChecker.HasFlushProp(this) && RealDeepCount !== ThisDeep)\r\n                        {\r\n                            SpeacialBtnSelector.ButtonSelectorAdd();\r\n                        }\r\n\r\n                        if(!OurChecker.HasFlushProp(this))\r\n                        {\r\n                            SpeacialBtnSelector.ButtonSelectorRemove();\r\n                        }\r\n                    });\r\n                }\r\n                else if (OurConfiguration.Type == \"radio\" || OurConfiguration.Type == \"checkbox\") {\r\n                    jQuery(FlushThis).each(function(){\r\n\r\n                        if(OurChecker.HasFlushProp(this) && RealDeepCount !== ThisDeep)\r\n                        {\r\n                            jQuery(this).prop(\"checked\", true);\r\n                        }\r\n\r\n                        if(!OurChecker.HasFlushProp(this))\r\n                        {\r\n                            jQuery(this).prop(\"checked\", false);\r\n                        }\r\n                    });\r\n                    \r\n                }\r\n                \r\n            }\r\n        });\r\n    }\r\n}","import jQuery from \"jquery\";\r\nimport {BaseConfiguration} from \"../Configurations/BaseConfiguration\";\r\n\r\nexport class DeepElementSelector\r\n{\r\n    constructor(private Configuration:BaseConfiguration, private UniqueDeeps:Array<number>)\r\n    {\r\n\r\n    }\r\n    public GetDeepElements():Array<JQuery<HTMLFormElement>>{\r\n        let DeepElements:Array<JQuery<HTMLFormElement>> = [];\r\n        let OurConfiguration = this.Configuration;\r\n        this.UniqueDeeps.forEach(function(deep) {\r\n\r\n            let FindedDeep:JQuery<HTMLFormElement> | undefined;\r\n            if (OurConfiguration.Type == \"select\") {\r\n                FindedDeep = jQuery(OurConfiguration.Parents).filter(\"[data-\" + OurConfiguration.DataDeepProp + \"='\" + deep + \"']\").find(OurConfiguration.CheckSelector);\r\n            }\r\n            else if (OurConfiguration.Type == \"radio\" || OurConfiguration.Type == \"checkbox\" || OurConfiguration.Type == \"button\" || OurConfiguration.Type == \"a\") {\r\n                FindedDeep = jQuery(OurConfiguration.Parents).filter(OurConfiguration.CheckSelector).filter(\"[data-\" + OurConfiguration.DataDeepProp + \"='\" + deep + \"']\");\r\n            }\r\n            if(FindedDeep !== undefined && jQuery(FindedDeep).length > 0)\r\n            {\r\n                DeepElements.push(FindedDeep);\r\n            }\r\n        });\r\n\r\n        return DeepElements;\r\n    }\r\n\r\n}","import jQuery from \"jquery\";\r\nimport {BaseConfiguration} from \"../Configurations/BaseConfiguration\";\r\nexport class QueryEngine{\r\n    constructor(private Configuration:BaseConfiguration)\r\n    {\r\n\r\n    }\r\n    public DeepQueryGenerator(DeepElements:Array<JQuery<HTMLFormElement>>,Queries?:Array<string>):Array<string>{\r\n        \r\n        if(Queries === undefined) {\r\n            Queries = [];\r\n        }\r\n\r\n        if (DeepElements.length === 0) {\r\n            return Queries;\r\n        }\r\n\r\n        let CopyDeepElements = DeepElements.slice();\r\n        let TakenLayer = CopyDeepElements.shift();\r\n        let ExtendQueries:Array<string> = [];\r\n        let DetectedNone = jQuery(TakenLayer!).filter(\"[data-\" + this.Configuration.DataFlushProp + \"='true']\");\r\n        if (jQuery(DetectedNone).length <= 0) {\r\n            jQuery(TakenLayer!).each(function () {\r\n                let element = this;\r\n                if (Queries!.length == 0) {\r\n                    let classValue = \".\" + jQuery(element).attr(\"value\");\r\n                    ExtendQueries.push(classValue);\r\n\r\n                }\r\n                else if (Queries!.length > 0) {\r\n                    Queries!.forEach(function(query) {\r\n                        let classValue = \".\" + jQuery(element).attr(\"value\");\r\n                        let newQuery = query + classValue;\r\n                        ExtendQueries.push(newQuery);\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        else if (jQuery(DetectedNone).length > 0) {\r\n            ExtendQueries = Queries;\r\n        }\r\n\r\n\r\n        return this.DeepQueryGenerator(CopyDeepElements, ExtendQueries);\r\n        \r\n    }\r\n    public CssQueryGenerator(PossibleQueries:Array<string>):string\r\n    {\r\n        var ClassQuery = \"\";\r\n        if (PossibleQueries === null) {\r\n            ClassQuery = this.Configuration.BaseClass;\r\n        }\r\n        else if (PossibleQueries.length <= 0) {\r\n            ClassQuery = this.Configuration.BaseClass;\r\n        }\r\n        else if (PossibleQueries !== null && PossibleQueries.length > 0) {\r\n            let OurConfiguration = this.Configuration;\r\n            PossibleQueries.forEach(function(value) {\r\n                ClassQuery += OurConfiguration.BaseClass + value + \",\"\r\n            });\r\n            ClassQuery = ClassQuery.substring(0, ClassQuery.length - 1);\r\n        }\r\n\r\n        return ClassQuery;\r\n    }\r\n}","import jQuery from \"jquery\";\r\nimport { BaseConfiguration } from \"../Configurations/BaseConfiguration\";\r\nimport { ExtraConfigurationChecker } from \"../Checks/ExtraConfigurationChecker\";\r\n\r\nexport class FilterHiderInitializers{\r\n\r\n    private Checker:ExtraConfigurationChecker;\r\n\r\n    constructor(private Configuration:BaseConfiguration)\r\n    {\r\n        this.Checker = new ExtraConfigurationChecker(Configuration);\r\n    }\r\n    public RunHider(\r\n        DeepElements:Array<JQuery<HTMLFormElement>>,\r\n        FocusedItem:JQuery<HTMLFormElement>,\r\n        AllDeeps:Array<number>,\r\n        PossibleQueries:Array<string>):void\r\n        {\r\n            if(this.Checker.HasHideUnrelateds())\r\n            {\r\n                let OurConfiguration = this.Configuration;\r\n                let OurChecker = this.Checker;\r\n                let DeepCount = parseInt(jQuery(FocusedItem).data(OurConfiguration.DataDeepProp), 10);\r\n                if (DeepCount != DeepElements.length) {\r\n                    let DiscoverThisDeep = DeepCount + 1;\r\n                    if (OurConfiguration.Type == \"select\") {\r\n                        let UnSortedDeep = jQuery(OurConfiguration.Parents).filter(\"[data-\" + OurConfiguration.DataDeepProp + \"='\" + DiscoverThisDeep + \"']\");\r\n                        jQuery(UnSortedDeep).find(\"option\").each(function () {\r\n                            jQuery(this).removeClass(OurConfiguration.RelatedFilterShowClass);\r\n                            jQuery(this).removeClass(OurConfiguration.RelatedFilterHideClass);\r\n                            jQuery(this).addClass(OurConfiguration.RelatedFilterShowClass);\r\n                            jQuery(this).show();\r\n                        });\r\n                        let SelectedElement = jQuery(FocusedItem).find(OurConfiguration.CheckSelector);\r\n                        if (!OurChecker.HasFlushProp(SelectedElement)) {\r\n                            jQuery(UnSortedDeep).find(\"option\").each(function () {\r\n                                if (!OurChecker.HasFlushProp(this)) {\r\n                                    let UnSelectedValue = jQuery(this).val();\r\n                                    let FindedAny = false;\r\n                                    PossibleQueries.forEach(function(value) {\r\n                                        let InvestgatorClass = OurConfiguration.BaseClass + value + \".\" + UnSelectedValue;\r\n                                        let CountOfSelector = jQuery(InvestgatorClass).length;\r\n                                        if (CountOfSelector > 0) {\r\n                                            FindedAny = true;\r\n                                        }\r\n                                    });\r\n                                    if (!FindedAny) {\r\n                                        jQuery(this).removeClass(OurConfiguration.RelatedFilterShowClass);\r\n                                        jQuery(this).removeClass(OurConfiguration.RelatedFilterHideClass);\r\n                                        jQuery(this).addClass(OurConfiguration.RelatedFilterHideClass);\r\n                                        jQuery(this).hide();\r\n                                    }\r\n                                    FindedAny = false;\r\n                                }\r\n\r\n                            });\r\n                        }\r\n                    }\r\n                    else if (OurConfiguration.Type == \"radio\" || OurConfiguration.Type == \"checkbox\" || OurConfiguration.Type == \"button\" || OurConfiguration.Type == \"a\") {\r\n                        var unSortedDeep = jQuery(OurConfiguration.Parents).filter(\"[data-\" + OurConfiguration.DataDeepProp + \"='\" + DiscoverThisDeep + \"']\");\r\n                        jQuery(unSortedDeep).each(function () {\r\n                            jQuery(this).show();\r\n                        });\r\n                        let SelectedItem:any;\r\n                        if (OurConfiguration.Type == \"radio\" || OurConfiguration.Type == \"checkbox\") {\r\n                            SelectedItem = jQuery(FocusedItem);\r\n                        }\r\n                        if (OurConfiguration.Type == \"button\" || OurConfiguration.Type == \"a\") {\r\n                            SelectedItem = jQuery(OurConfiguration.Parents).filter(OurConfiguration.CheckSelector).filter(\"[data-\" + OurConfiguration.DataDeepProp + \"='\" + DeepCount + \"']\");\r\n                        }\r\n\r\n                        if (!OurChecker.HasFlushProp(SelectedItem)) {\r\n                            jQuery(unSortedDeep).each(function () {\r\n                                if (!OurChecker.HasFlushProp(this)) {\r\n                                    let UnSelectedValue:string | undefined;\r\n                                    if (OurConfiguration.Type === \"a\") {\r\n                                        UnSelectedValue = jQuery(this).attr(\"value\");\r\n                                    }\r\n                                    else {\r\n                                        UnSelectedValue = jQuery(this).val() as string;\r\n                                    }\r\n\r\n                                    let FindedAny = false;\r\n                                    PossibleQueries.forEach(function(value) {\r\n                                        let InvestgatorClass = OurConfiguration.BaseClass + value + \".\" + UnSelectedValue;\r\n                                        let CountOfSelector = jQuery(InvestgatorClass).length;\r\n                                        if (CountOfSelector > 0) {\r\n                                            FindedAny = true;\r\n                                        }\r\n                                    });\r\n                                    if (!FindedAny && PossibleQueries.length > 0) {\r\n                                        jQuery(this).removeClass(OurConfiguration.RelatedFilterShowClass);\r\n                                        jQuery(this).removeClass(OurConfiguration.RelatedFilterHideClass);\r\n                                        jQuery(this).addClass(OurConfiguration.RelatedFilterHideClass);\r\n                                        jQuery(this).hide();\r\n                                    }\r\n                                    \r\n                                    FindedAny = false;\r\n                                }\r\n\r\n                            });\r\n                        }\r\n                    }\r\n            }\r\n            if(DeepElements.length <= 0)\r\n            {\r\n                AllDeeps.forEach(function(deep) {\r\n                    if (OurConfiguration.Type == \"select\") {\r\n                        let UnSortedDeep = jQuery(OurConfiguration.Parents).filter(\"[data-\" + OurConfiguration.DataDeepProp + \"='\" + deep + \"']\");\r\n                        jQuery(UnSortedDeep).find(\"option\").each(function () {\r\n\r\n                            jQuery(this).removeClass(OurConfiguration.RelatedFilterShowClass);\r\n                            jQuery(this).removeClass(OurConfiguration.RelatedFilterHideClass);\r\n                            jQuery(this).addClass(OurConfiguration.RelatedFilterShowClass);\r\n                            jQuery(this).show();\r\n\r\n                        });\r\n                    }\r\n                    else if (OurConfiguration.Type == \"radio\" || OurConfiguration.Type == \"checkbox\" || OurConfiguration.Type == \"button\" || OurConfiguration.Type == \"a\") {\r\n                        let UnSortedDeep = jQuery(OurConfiguration.Parents).filter(\"[data-\" + OurConfiguration.DataDeepProp + \"='\" + deep + \"']\");\r\n                        jQuery(UnSortedDeep).each(function () {\r\n                            jQuery(this).removeClass(OurConfiguration.RelatedFilterShowClass);\r\n                            jQuery(this).removeClass(OurConfiguration.RelatedFilterHideClass);\r\n                            jQuery(this).addClass(OurConfiguration.RelatedFilterShowClass);\r\n                            jQuery(this).show();\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n}","\r\nimport {BaseConfiguration} from \"./Configurations/BaseConfiguration\";\r\nimport {FilterbucksEvents} from \"./Events/FilterbucksEvents\";\r\nimport {FilterbucksElementInitializers} from \"./Initializers/FilterbucksElementInitializers\";\r\nimport {DeepCounter} from \"./Counters/DeepCounter\";\r\nimport {Flusher} from \"./SpecialSelectors/Flusher\";\r\nimport {DeepElementSelector} from \"./SpecialSelectors/DeepElementSelector\";\r\nimport {QueryEngine} from \"./Query/QueryEngine\";\r\nimport {FilterHiderInitializers} from \"./Initializers/FilterHiderInitializers\";\r\n\r\nexport class Engine\r\n{\r\n    public Run(Event:any): void {\r\n\r\n        let Configuration = Event.data as BaseConfiguration;\r\n\r\n        let FocusedItem = this as unknown as JQuery<HTMLFormElement>;\r\n\r\n        let EventTriggers = new FilterbucksEvents(Configuration,FocusedItem);\r\n\r\n        let Initializer = new FilterbucksElementInitializers(Configuration, FocusedItem);\r\n\r\n        let Counter = new DeepCounter(Configuration);\r\n\r\n        \r\n\r\n        EventTriggers.FilterbucksStartEvent();\r\n        \r\n        Initializer.InitializeElement();\r\n\r\n        let SelectedDeeps = Counter.SelectedElementsDeeps();\r\n        let AllDeeps = Counter.AllElementsDeep();\r\n\r\n        let FlushFilter = new Flusher(Configuration,SelectedDeeps,FocusedItem);\r\n\r\n        FlushFilter.Flush();\r\n\r\n        let DeepSelector = new DeepElementSelector(Configuration,SelectedDeeps);\r\n\r\n        let DeepElements = DeepSelector.GetDeepElements();\r\n\r\n        let QueryGenerator = new QueryEngine(Configuration);\r\n        let Hider = new FilterHiderInitializers(Configuration);\r\n\r\n        let PossibleQueries = QueryGenerator.DeepQueryGenerator(DeepElements);\r\n\r\n        Hider.RunHider(DeepElements,FocusedItem,AllDeeps,PossibleQueries);\r\n\r\n        var ClassQuery = QueryGenerator.CssQueryGenerator(PossibleQueries);\r\n\r\n        Initializer.InitializeQuery(ClassQuery);\r\n        \r\n        EventTriggers.FilterbucksEndEvent();\r\n\r\n    }\r\n}","///<reference path=\"filterbucks.d.ts\"/>\r\n\r\nimport jQuery from \"jquery\";\r\nimport {BaseConfiguration} from \"./base/Configurations/BaseConfiguration\";\r\nimport {Engine} from \"./base/Engine\";\r\n\r\n\r\n\r\n\r\njQuery.fn.filterbucks = function(ExtraConfiguration:any)\r\n{\r\n    let base = new BaseConfiguration(this as JQuery<HTMLFormElement>,ExtraConfiguration);\r\n    if (base.Type === \"button\" || base.Type === \"a\") {\r\n        base.Event = \"click\";\r\n        base.CheckSelector = \"[clicked]\";\r\n    }\r\n    if (base.Type === \"select\") {\r\n        base.CheckSelector = \"option:selected\";\r\n    }\r\n    if (base.Type === \"radio\" || base.Type === \"checkbox\") {\r\n        base.CheckSelector = \":checked\";\r\n    }\r\n\r\n    var filterbucksEngine = new Engine();\r\n\r\n    this.on(base.Event, base, filterbucksEngine.Run);\r\n\r\n};\r\n"],"names":[],"mappings":"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"}